services:
  - type: web
    name: discourse-web
    env: docker
    dockerfilePath: ./Dockerfile
    plan: standard
    autoDeploy: true
    healthCheckPath: /srv/status
    envVars:
      - key: RAILS_ENV
        value: production
      - key: DISCOURSE_HOSTNAME
        value: forum.example.com          # <- change to your domain
      - key: SECRET_KEY_BASE
        generateValue: true
      - key: DATABASE_URL
        fromDatabase:
          name: discourse-db
          property: connectionString
      - key: REDIS_URL
        fromService:
          name: discourse-redis
          type: redis
          property: connectionString
      # SMTP (required)
      - key: DISCOURSE_SMTP_ADDRESS
        value: smtp.yourprovider.com
      - key: DISCOURSE_SMTP_PORT
        value: "587"
      - key: DISCOURSE_SMTP_USER_NAME
        value: your_smtp_username
      - key: DISCOURSE_SMTP_PASSWORD
        sync: false
      - key: DISCOURSE_DEVELOPER_EMAILS
        value: you@example.com
      # Optional: S3 for uploads (recommended)
      # - key: DISCOURSE_USE_S3
      #   value: "true"
      # - key: DISCOURSE_S3_REGION
      #   value: us-east-1
      # - key: DISCOURSE_S3_BUCKET
      #   value: your-bucket
      # - key: DISCOURSE_S3_ACCESS_KEY_ID
      #   sync: false
      # - key: DISCOURSE_S3_SECRET_ACCESS_KEY
      #   sync: false
    dockerCommand: >
      bash -lc "bundle exec rake db:migrate &&
                bundle exec puma -C config/puma.rb"

  - type: worker
    name: discourse-worker
    env: docker
    dockerfilePath: ./Dockerfile
    autoDeploy: true
    envVars:
      - key: RAILS_ENV
        value: production
      - key: DATABASE_URL
        fromDatabase:
          name: discourse-db
          property: connectionString
      - key: REDIS_URL
        fromService:
          name: discourse-redis
          type: redis
          property: connectionString
      - key: SECRET_KEY_BASE
        sync: false
    dockerCommand: >
      bash -lc "bundle exec sidekiq -e production -C config/sidekiq.yml"

databases:
  - name: discourse-db
    plan: standard

# Redis as a managed service
services:
  - type: redis
    name: discourse-redis
    ipAllowList: []    # internal access only
